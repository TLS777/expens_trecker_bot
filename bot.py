from telebot import TeleBot, types
from database import engine, Base, get_session
from models import User, Transaction
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os


load_dotenv()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
bot = TeleBot(TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not user:
        user = User(telegram_id=message.from_user.id, name=message.from_user.first_name)
        session.add(user)
        session.commit()
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
                                      "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                      "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
                                      "/stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    session.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@bot.message_handler(commands=['add'])
def add_transaction(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    bot.register_next_step_handler(message, get_amount)

def get_amount(message):
    try:
        amount = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        bot.register_next_step_handler(message, get_category, amount)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

def get_category(message, amount):
    category = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("income", "expense")
    bot.send_message(message.chat.id, "–≠—Ç–æ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥?", reply_markup=markup)
    bot.register_next_step_handler(message, save_transaction, amount, category)

def save_transaction(message, amount, category):
    type_ = message.text.lower()
    session = get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    transaction = Transaction(user_id=user.id, amount=amount, category=category, type=type_)
    session.add(transaction)
    session.commit()
    session.close()

    bot.send_message(message.chat.id, "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(commands=['stats'])
def stats(message):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not user:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        session.close()
        return

    start_date = datetime.utcnow() - timedelta(days=30)
    transactions = session.query(Transaction).filter(
        Transaction.user_id == user.id,
        Transaction.created_at >= start_date
    ).all()

    income = sum(t.amount for t in transactions if t.type == "income")
    expense = sum(t.amount for t in transactions if t.type == "expense")
    balance = income - expense

    bot.send_message(message.chat.id,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:\n"
        f"–î–æ—Ö–æ–¥: {income}\n"
        f"–†–∞—Å—Ö–æ–¥: {expense}\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance}"
    )
    session.close()

bot.polling()
